{"ast":null,"code":"import _classCallCheck from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var BaseShape =\n/*#__PURE__*/\nfunction () {\n  function BaseShape() {\n    _classCallCheck(this, BaseShape);\n\n    this._typeChecks = new Map();\n    this._objectTypes = [];\n  }\n\n  _createClass(BaseShape, [{\n    key: \"getTypes\",\n    value: function getTypes() {\n      return this._objectTypes.slice();\n    }\n  }, {\n    key: \"addTypeCheck\",\n    value: function addTypeCheck(checkFunc, type) {\n      this._typeChecks.set(checkFunc, type);\n    }\n  }, {\n    key: \"commitValues\",\n    value: function commitValues() {\n      var _this = this;\n\n      this._objectTypes = [];\n\n      this._typeChecks.forEach(function (type, checkFunc) {\n        if (checkFunc()) {\n          _this._objectTypes.push(type);\n        }\n      });\n    }\n  }]);\n\n  return BaseShape;\n}();","map":{"version":3,"sources":["/Users/escher/triangle-type-react-app/src/triangle/BaseShape.ts"],"names":["BaseShape","_typeChecks","Map","_objectTypes","slice","checkFunc","type","set","forEach","push"],"mappings":";;AAEA,WAAaA,SAAb;AAAA;AAAA;AAAA;AAAA;;AAAA,SACYC,WADZ,GACgD,IAAIC,GAAJ,EADhD;AAAA,SAGYC,YAHZ,GAGoC,EAHpC;AAAA;;AAAA;AAAA;AAAA,+BAK+B;AACvB,aAAO,KAAKA,YAAL,CAAkBC,KAAlB,EAAP;AACH;AAPL;AAAA;AAAA,iCAS2BC,SAT3B,EASoDC,IATpD,EASiE;AACzD,WAAKL,WAAL,CAAiBM,GAAjB,CAAqBF,SAArB,EAAgCC,IAAhC;AACH;AAXL;AAAA;AAAA,mCAakC;AAAA;;AAC1B,WAAKH,YAAL,GAAoB,EAApB;;AACA,WAAKF,WAAL,CAAiBO,OAAjB,CAAyB,UAACF,IAAD,EAASD,SAAT,EACzB;AACI,YAAIA,SAAS,EAAb,EAAiB;AACb,UAAA,KAAI,CAACF,YAAL,CAAkBM,IAAlB,CAAuBH,IAAvB;AACH;AACJ,OALD;AAMH;AArBL;;AAAA;AAAA","sourcesContent":["type CheckFunction = () => boolean;\n\nexport class BaseShape <T> {\n    private _typeChecks:Map<CheckFunction, T> = new Map<CheckFunction, T>();\n\n    private _objectTypes:Array<T> = [];\n\n    public getTypes():Array<T> {\n        return this._objectTypes.slice();\n    }\n\n    protected addTypeCheck(checkFunc:CheckFunction, type:T):void {\n        this._typeChecks.set(checkFunc, type);\n    }\n\n    protected commitValues():void { \n        this._objectTypes = [];\n        this._typeChecks.forEach((type:T, checkFunc:CheckFunction) => \n        {\n            if (checkFunc()) { \n                this._objectTypes.push(type);\n            }\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}