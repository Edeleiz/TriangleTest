{"ast":null,"code":"import _classCallCheck from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { TriangleType } from \"./enum\";\nimport { BaseShape } from \"./BaseShape\"; //TODO как обрабатывать ошибки, если в конструктор передается число <=0?\n//TODO конструктор, который принимает объект имплементирующий интерфейс ITriangle\n//TODO a,b,c наверное должны быть приватными, чтобы их не выставили в <=0?\n//TODO так как a,b,c не инты, их нельзя сравнивать через ===, надо учитывать погрешность...\n//test\n\nexport var TriangleShape =\n/*#__PURE__*/\nfunction (_BaseShape) {\n  _inherits(TriangleShape, _BaseShape);\n\n  function TriangleShape(a, b, c) {\n    var _this;\n\n    _classCallCheck(this, TriangleShape);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TriangleShape).call(this));\n    _this.a = a;\n    _this.b = b;\n    _this.c = c;\n\n    _this.addTypeCheck(_this.isInvalid, TriangleType.INVALID);\n\n    _this.addTypeCheck(_this.isEquilateral, TriangleType.EQUILATERAL);\n\n    _this.addTypeCheck(_this.isIsosceles, TriangleType.ISOSCELES);\n\n    _this.addTypeCheck(_this.isScalene, TriangleType.SCALENE);\n\n    _this.setValues(a, b, c);\n\n    return _this;\n  }\n\n  _createClass(TriangleShape, [{\n    key: \"setValues\",\n    value: function setValues(a, b, c) {\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      this.commitValues();\n    }\n  }, {\n    key: \"isInvalid\",\n    value: function isInvalid() {\n      return this.isInvalidSides() || this.isImpossible();\n    }\n  }, {\n    key: \"isInvalidSides\",\n    value: function isInvalidSides() {\n      return this.a <= 0 || this.b <= 0 || this.c <= 0;\n    }\n  }, {\n    key: \"isImpossible\",\n    value: function isImpossible() {\n      return this.a >= this.b + this.c || this.c >= this.b + this.a || this.b >= this.a + this.c;\n    }\n  }, {\n    key: \"isEquilateral\",\n    value: function isEquilateral() {\n      return this.a === this.b && this.b === this.c;\n    }\n  }, {\n    key: \"isScalene\",\n    value: function isScalene() {\n      return this.a !== this.b && this.b !== this.c;\n    }\n  }, {\n    key: \"isIsosceles\",\n    value: function isIsosceles() {\n      return this.a === this.b && this.c !== this.a || this.b === this.c && this.a !== this.b || this.c === this.a && this.b !== this.c;\n    }\n  }]);\n\n  return TriangleShape;\n}(BaseShape);","map":{"version":3,"sources":["/Users/escher/triangle-type-react-app/src/triangle/Triangle.ts"],"names":["TriangleType","BaseShape","TriangleShape","a","b","c","addTypeCheck","isInvalid","INVALID","isEquilateral","EQUILATERAL","isIsosceles","ISOSCELES","isScalene","SCALENE","setValues","commitValues","isInvalidSides","isImpossible"],"mappings":";;;;;AACA,SAASA,YAAT,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,WAAaC,aAAb;AAAA;AAAA;AAAA;;AACI,yBAAmBC,CAAnB,EAAqCC,CAArC,EAAuDC,CAAvD,EAAkE;AAAA;;AAAA;;AAC9D;AAD8D;AAAA;AAAA;;AAG9D,UAAKC,YAAL,CAAkB,MAAKC,SAAvB,EAAkCP,YAAY,CAACQ,OAA/C;;AACA,UAAKF,YAAL,CAAkB,MAAKG,aAAvB,EAAsCT,YAAY,CAACU,WAAnD;;AACA,UAAKJ,YAAL,CAAkB,MAAKK,WAAvB,EAAoCX,YAAY,CAACY,SAAjD;;AACA,UAAKN,YAAL,CAAkB,MAAKO,SAAvB,EAAkCb,YAAY,CAACc,OAA/C;;AAEA,UAAKC,SAAL,CAAeZ,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB;;AAR8D;AASjE;;AAVL;AAAA;AAAA,8BAYqBF,CAZrB,EAY+BC,CAZ/B,EAYyCC,CAZzC,EAYyD;AACjD,WAAKF,CAAL,GAASA,CAAT;AACA,WAAKC,CAAL,GAASA,CAAT;AACA,WAAKC,CAAL,GAASA,CAAT;AAEA,WAAKW,YAAL;AACH;AAlBL;AAAA;AAAA,gCAoBiC;AACzB,aAAO,KAAKC,cAAL,MAAyB,KAAKC,YAAL,EAAhC;AACH;AAtBL;AAAA;AAAA,qCAwBsC;AAC9B,aAAO,KAAKf,CAAL,IAAU,CAAV,IAAe,KAAKC,CAAL,IAAU,CAAzB,IAA8B,KAAKC,CAAL,IAAU,CAA/C;AACH;AA1BL;AAAA;AAAA,mCA4BoC;AAC5B,aAAO,KAAKF,CAAL,IAAU,KAAKC,CAAL,GAAS,KAAKC,CAAxB,IACH,KAAKA,CAAL,IAAU,KAAKD,CAAL,GAAS,KAAKD,CADrB,IAEH,KAAKC,CAAL,IAAU,KAAKD,CAAL,GAAS,KAAKE,CAF5B;AAGH;AAhCL;AAAA;AAAA,oCAkCqC;AAC7B,aAAO,KAAKF,CAAL,KAAW,KAAKC,CAAhB,IAAqB,KAAKA,CAAL,KAAW,KAAKC,CAA5C;AACH;AApCL;AAAA;AAAA,gCAsCiC;AACzB,aAAO,KAAKF,CAAL,KAAW,KAAKC,CAAhB,IAAqB,KAAKA,CAAL,KAAW,KAAKC,CAA5C;AACH;AAxCL;AAAA;AAAA,kCA0CmC;AAC3B,aACK,KAAKF,CAAL,KAAW,KAAKC,CAAhB,IAAqB,KAAKC,CAAL,KAAW,KAAKF,CAAtC,IACC,KAAKC,CAAL,KAAW,KAAKC,CAAhB,IAAqB,KAAKF,CAAL,KAAW,KAAKC,CADtC,IAEC,KAAKC,CAAL,KAAW,KAAKF,CAAhB,IAAqB,KAAKC,CAAL,KAAW,KAAKC,CAH1C;AAKH;AAhDL;;AAAA;AAAA,EAAmCJ,SAAnC","sourcesContent":["import { isError } from \"util\";\nimport { TriangleType } from \"./enum\"\nimport { BaseShape } from \"./BaseShape\";\n\n//TODO как обрабатывать ошибки, если в конструктор передается число <=0?\n//TODO конструктор, который принимает объект имплементирующий интерфейс ITriangle\n//TODO a,b,c наверное должны быть приватными, чтобы их не выставили в <=0?\n//TODO так как a,b,c не инты, их нельзя сравнивать через ===, надо учитывать погрешность...\n//test\n\nexport class TriangleShape extends BaseShape<TriangleType>{\n    constructor(public a: number, public b: number, public c: number) { \n        super();\n\n        this.addTypeCheck(this.isInvalid, TriangleType.INVALID);\n        this.addTypeCheck(this.isEquilateral, TriangleType.EQUILATERAL);\n        this.addTypeCheck(this.isIsosceles, TriangleType.ISOSCELES);\n        this.addTypeCheck(this.isScalene, TriangleType.SCALENE);\n\n        this.setValues(a, b, c);\n    }\n\n    public setValues(a:number, b:number, c:number): void {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n\n        this.commitValues();\n    }\n\n    private isInvalid(): boolean {\n        return this.isInvalidSides() || this.isImpossible();\n    }\n\n    private isInvalidSides(): boolean {\n        return this.a <= 0 || this.b <= 0 || this.c <= 0\n    }\n\n    private isImpossible(): boolean {\n        return this.a >= this.b + this.c ||\n            this.c >= this.b + this.a ||\n            this.b >= this.a + this.c\n    }\n\n    private isEquilateral(): boolean {\n        return this.a === this.b && this.b === this.c;\n    }\n\n    private isScalene(): boolean {\n        return this.a !== this.b && this.b !== this.c;\n    }\n\n    private isIsosceles(): boolean {\n        return (\n            (this.a === this.b && this.c !== this.a) ||\n            (this.b === this.c && this.a !== this.b) ||\n            (this.c === this.a && this.b !== this.c)\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}