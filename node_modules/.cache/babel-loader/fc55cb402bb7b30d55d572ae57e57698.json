{"ast":null,"code":"import _classCallCheck from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/escher/triangle-type-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport BaseModel from \"../base/BaseModel\";\nimport { Side } from \"./enum\";\nimport { TriangleShape, TriangleType } from \"./Triangle\";\n\nvar _default =\n/*#__PURE__*/\nfunction (_BaseModel) {\n  _inherits(_default, _BaseModel);\n\n  function _default() {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this));\n    _this.triangle = void 0;\n    _this.triangle = new TriangleShape(0, 0, 0);\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"getLocale\",\n    value: function getLocale(type) {\n      switch (type) {\n        case TriangleType.EQUILATERAL:\n          return \"Triangle is equilateral\";\n\n        case TriangleType.SCALENE:\n          return \"Triangle is scalene\";\n\n        case TriangleType.ISOSCELES:\n          return \"Triangle is isosceles\";\n      }\n\n      throw new Error(\"Trigangle type \".concat(type, \" locale is not defined\"));\n    }\n  }, {\n    key: \"getTriangleType\",\n    value: function getTriangleType() {\n      var type = this.triangle.getType();\n\n      if (type === TriangleType.INVALID) {\n        return \"Invalid triangle sides\";\n      }\n\n      return this.getLocale(type);\n    }\n  }, {\n    key: \"setSide\",\n    value: function setSide(side, value) {\n      if (side == Side.sideA) {\n        this.triangle.a = value;\n      } else if (side == Side.sideB) {\n        this.triangle.b = value;\n      } else if (side == Side.sideC) {\n        this.triangle.c = value;\n      }\n    }\n  }]);\n\n  return _default;\n}(BaseModel);\n\nexport { _default as default };","map":{"version":3,"sources":["/Users/escher/triangle-type-react-app/src/triangle/TriangleModel.ts"],"names":["BaseModel","Side","TriangleShape","TriangleType","triangle","type","EQUILATERAL","SCALENE","ISOSCELES","Error","getType","INVALID","getLocale","side","value","sideA","a","sideB","b","sideC","c"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,YAA5C;;;;;;;AAKI,sBAAc;AAAA;;AAAA;;AACV;AADU,UAFNC,QAEM;AAEV,UAAKA,QAAL,GAAgB,IAAIF,aAAJ,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAhB;AAFU;AAGb;;;;8BAESG,I,EAAoB;AAC1B,cAAQA,IAAR;AACI,aAAKF,YAAY,CAACG,WAAlB;AACI,iBAAO,yBAAP;;AACJ,aAAKH,YAAY,CAACI,OAAlB;AACI,iBAAO,qBAAP;;AACJ,aAAKJ,YAAY,CAACK,SAAlB;AACI,iBAAO,uBAAP;AANR;;AAQA,YAAM,IAAIC,KAAJ,0BAA4BJ,IAA5B,4BAAN;AACH;;;sCAEiB;AACd,UAAMA,IAAI,GAAG,KAAKD,QAAL,CAAcM,OAAd,EAAb;;AACA,UAAIL,IAAI,KAAKF,YAAY,CAACQ,OAA1B,EAAmC;AAC/B,eAAO,wBAAP;AACH;;AAED,aAAO,KAAKC,SAAL,CAAeP,IAAf,CAAP;AACH;;;4BAEOQ,I,EAAYC,K,EAAe;AAC/B,UAAID,IAAI,IAAIZ,IAAI,CAACc,KAAjB,EAAwB;AACpB,aAAKX,QAAL,CAAcY,CAAd,GAAkBF,KAAlB;AACH,OAFD,MAEO,IAAID,IAAI,IAAIZ,IAAI,CAACgB,KAAjB,EAAwB;AAC3B,aAAKb,QAAL,CAAcc,CAAd,GAAkBJ,KAAlB;AACH,OAFM,MAEA,IAAID,IAAI,IAAIZ,IAAI,CAACkB,KAAjB,EAAwB;AAC3B,aAAKf,QAAL,CAAcgB,CAAd,GAAkBN,KAAlB;AACH;AACJ;;;;EArCwBd,S","sourcesContent":["import BaseModel from \"../base/BaseModel\";\nimport { Side } from \"./enum\";\nimport { TriangleShape, TriangleType } from \"./Triangle\";\n\nexport default class extends BaseModel {\n    private triangle: TriangleShape;\n\n    constructor() {\n        super();\n        this.triangle = new TriangleShape(0, 0, 0);\n    }\n\n    getLocale(type: TriangleType) {\n        switch (type) {\n            case TriangleType.EQUILATERAL:\n                return \"Triangle is equilateral\";\n            case TriangleType.SCALENE:\n                return \"Triangle is scalene\";\n            case TriangleType.ISOSCELES:\n                return \"Triangle is isosceles\";\n        }\n        throw new Error(`Trigangle type ${type} locale is not defined`);\n    }\n\n    getTriangleType() {\n        const type = this.triangle.getType();\n        if (type === TriangleType.INVALID) {\n            return \"Invalid triangle sides\";\n        }\n\n        return this.getLocale(type);\n    }\n\n    setSide(side: Side, value: number) {\n        if (side == Side.sideA) {\n            this.triangle.a = value;\n        } else if (side == Side.sideB) {\n            this.triangle.b = value;\n        } else if (side == Side.sideC) {\n            this.triangle.c = value;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}